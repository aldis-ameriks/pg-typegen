exports[`using interfaces 1`] = `
"export enum Apples {}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomEnum {\\n  'foo   bar3' = 'foo   bar3',\\n  'foo  ---- ____ ---   bar6' = 'foo  ---- ____ ---   bar6',\\n  'foo bar' = 'foo bar',\\n  'foo----bar4' = 'foo----bar4',\\n  'foo-bar2' = 'foo-bar2',\\n  foo____bar5 = 'foo____bar5',\\n  value_one = 'value_one',\\n  value_two = 'value_two',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum Empty {}\\n\\nexport enum KebabCase1 {}\\n\\nexport enum KebabCase2 {\\n  'kebab-case-value' = 'kebab-case-value',\\n}\\n\\nexport enum WhiteSpace {\\n  'white space value' = 'white space value',\\n}\\n\\nexport interface AddressEntity {};\\n\\nexport interface AnotherViewEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface AppleEntity {};\\n\\nexport interface CustomEntity {\\n  custom1: CustomType;\\n  custom2: CustomType;\\n  custom3: CustomType;\\n  custom4: Array<CustomType>;\\n  custom5: Array<CustomType>;\\n  custom6: Array<CustomType>;\\n};\\n\\nexport interface DefaultEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface DefaultsNoColumnEntity {};\\n\\nexport interface EmptyEntity {};\\n\\nexport interface EntityEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface KebabCaseEntity {\\n  'kebab-case1': number | null;\\n  'kebab-case2': number;\\n};\\n\\nexport interface KnownEntity {\\n  known1: number;\\n  known2: number | null;\\n  known3: number | null;\\n  known4: number;\\n  known5: string | null;\\n  known6: string;\\n};\\n\\nexport interface SnakeCaseEntity {\\n  snake_case1: number | null;\\n  snake_case2: number;\\n};\\n\\nexport interface UnknownEntity {\\n  unknown1: any | null;\\n  unknown2: any;\\n  unknown3: Array<any> | null;\\n  unknown4: Array<any>;\\n};\\n\\nexport interface UpperCaseEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface ViewEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface WhiteSpaceEntity {\\n  'white space 1': number | null;\\n  'white space 2': number;\\n};\\n"
`;

exports[`using interfaces 2`] = `
"export enum Apples {}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomEnum {\\n  'foo   bar3' = 'foo   bar3',\\n  'foo  ---- ____ ---   bar6' = 'foo  ---- ____ ---   bar6',\\n  'foo bar' = 'foo bar',\\n  'foo----bar4' = 'foo----bar4',\\n  'foo-bar2' = 'foo-bar2',\\n  foo____bar5 = 'foo____bar5',\\n  value_one = 'value_one',\\n  value_two = 'value_two',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum Empty {}\\n\\nexport enum KebabCase1 {}\\n\\nexport enum KebabCase2 {\\n  'kebab-case-value' = 'kebab-case-value',\\n}\\n\\nexport enum WhiteSpace {\\n  'white space value' = 'white space value',\\n}\\n\\nexport interface AddressEntity {}\\n\\nexport interface AnotherViewEntity {\\n  one: number\\n  two: number | null\\n}\\n\\nexport interface AppleEntity {}\\n\\nexport interface CustomEntity {\\n  custom1: CustomType\\n  custom2: CustomType\\n  custom3: CustomType\\n  custom4: Array<CustomType>\\n  custom5: Array<CustomType>\\n  custom6: Array<CustomType>\\n}\\n\\nexport interface DefaultEntity {\\n  one: number\\n  two: number | null\\n}\\n\\nexport interface DefaultsNoColumnEntity {}\\n\\nexport interface EmptyEntity {}\\n\\nexport interface EntityEntity {\\n  duplicate: number\\n  duplicate: number\\n}\\n\\nexport interface KebabCaseEntity {\\n  'kebab-case1': number | null\\n  'kebab-case2': number\\n}\\n\\nexport interface KnownEntity {\\n  known1: number\\n  known2: number | null\\n  known3: number | null\\n  known4: number\\n  known5: string | null\\n  known6: string\\n}\\n\\nexport interface SnakeCaseEntity {\\n  snake_case1: number | null\\n  snake_case2: number\\n}\\n\\nexport interface UnknownEntity {\\n  unknown1: any | null\\n  unknown2: any\\n  unknown3: Array<any> | null\\n  unknown4: Array<any>\\n}\\n\\nexport interface UpperCaseEntity {\\n  duplicate: number\\n  duplicate: number\\n}\\n\\nexport interface ViewEntity {\\n  one: number\\n  two: number | null\\n}\\n\\nexport interface WhiteSpaceEntity {\\n  'white space 1': number | null\\n  'white space 2': number\\n}\\n"
`;

exports[`using types 1`] = `
"export enum Apples {}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomEnum {\\n  'foo   bar3' = 'foo   bar3',\\n  'foo  ---- ____ ---   bar6' = 'foo  ---- ____ ---   bar6',\\n  'foo bar' = 'foo bar',\\n  'foo----bar4' = 'foo----bar4',\\n  'foo-bar2' = 'foo-bar2',\\n  foo____bar5 = 'foo____bar5',\\n  value_one = 'value_one',\\n  value_two = 'value_two',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum Empty {}\\n\\nexport enum KebabCase1 {}\\n\\nexport enum KebabCase2 {\\n  'kebab-case-value' = 'kebab-case-value',\\n}\\n\\nexport enum WhiteSpace {\\n  'white space value' = 'white space value',\\n}\\n\\nexport type AddressEntity = {};\\n\\nexport type AnotherViewEntity = {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport type AppleEntity = {};\\n\\nexport type CustomEntity = {\\n  custom1: CustomType;\\n  custom2: CustomType;\\n  custom3: CustomType;\\n  custom4: Array<CustomType>;\\n  custom5: Array<CustomType>;\\n  custom6: Array<CustomType>;\\n};\\n\\nexport type DefaultEntity = {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport type DefaultsNoColumnEntity = {};\\n\\nexport type EmptyEntity = {};\\n\\nexport type EntityEntity = {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport type KebabCaseEntity = {\\n  'kebab-case1': number | null;\\n  'kebab-case2': number;\\n};\\n\\nexport type KnownEntity = {\\n  known1: number;\\n  known2: number | null;\\n  known3: number | null;\\n  known4: number;\\n  known5: string | null;\\n  known6: string;\\n};\\n\\nexport type SnakeCaseEntity = {\\n  snake_case1: number | null;\\n  snake_case2: number;\\n};\\n\\nexport type UnknownEntity = {\\n  unknown1: any | null;\\n  unknown2: any;\\n  unknown3: Array<any> | null;\\n  unknown4: Array<any>;\\n};\\n\\nexport type UpperCaseEntity = {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport type ViewEntity = {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport type WhiteSpaceEntity = {\\n  'white space 1': number | null;\\n  'white space 2': number;\\n};\\n"
`;

exports[`using types 2`] = `
"export enum Apples {}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomEnum {\\n  'foo   bar3' = 'foo   bar3',\\n  'foo  ---- ____ ---   bar6' = 'foo  ---- ____ ---   bar6',\\n  'foo bar' = 'foo bar',\\n  'foo----bar4' = 'foo----bar4',\\n  'foo-bar2' = 'foo-bar2',\\n  foo____bar5 = 'foo____bar5',\\n  value_one = 'value_one',\\n  value_two = 'value_two',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum Empty {}\\n\\nexport enum KebabCase1 {}\\n\\nexport enum KebabCase2 {\\n  'kebab-case-value' = 'kebab-case-value',\\n}\\n\\nexport enum WhiteSpace {\\n  'white space value' = 'white space value',\\n}\\n\\nexport type AddressEntity = {}\\n\\nexport type AnotherViewEntity = {\\n  one: number\\n  two: number | null\\n}\\n\\nexport type AppleEntity = {}\\n\\nexport type CustomEntity = {\\n  custom1: CustomType\\n  custom2: CustomType\\n  custom3: CustomType\\n  custom4: Array<CustomType>\\n  custom5: Array<CustomType>\\n  custom6: Array<CustomType>\\n}\\n\\nexport type DefaultEntity = {\\n  one: number\\n  two: number | null\\n}\\n\\nexport type DefaultsNoColumnEntity = {}\\n\\nexport type EmptyEntity = {}\\n\\nexport type EntityEntity = {\\n  duplicate: number\\n  duplicate: number\\n}\\n\\nexport type KebabCaseEntity = {\\n  'kebab-case1': number | null\\n  'kebab-case2': number\\n}\\n\\nexport type KnownEntity = {\\n  known1: number\\n  known2: number | null\\n  known3: number | null\\n  known4: number\\n  known5: string | null\\n  known6: string\\n}\\n\\nexport type SnakeCaseEntity = {\\n  snake_case1: number | null\\n  snake_case2: number\\n}\\n\\nexport type UnknownEntity = {\\n  unknown1: any | null\\n  unknown2: any\\n  unknown3: Array<any> | null\\n  unknown4: Array<any>\\n}\\n\\nexport type UpperCaseEntity = {\\n  duplicate: number\\n  duplicate: number\\n}\\n\\nexport type ViewEntity = {\\n  one: number\\n  two: number | null\\n}\\n\\nexport type WhiteSpaceEntity = {\\n  'white space 1': number | null\\n  'white space 2': number\\n}\\n"
`;

exports[`viewNames with single view 1`] = `
"export type Views = 'view';\\n\\nexport enum Apples {}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomEnum {\\n  'foo   bar3' = 'foo   bar3',\\n  'foo  ---- ____ ---   bar6' = 'foo  ---- ____ ---   bar6',\\n  'foo bar' = 'foo bar',\\n  'foo----bar4' = 'foo----bar4',\\n  'foo-bar2' = 'foo-bar2',\\n  foo____bar5 = 'foo____bar5',\\n  value_one = 'value_one',\\n  value_two = 'value_two',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum Empty {}\\n\\nexport enum KebabCase1 {}\\n\\nexport enum KebabCase2 {\\n  'kebab-case-value' = 'kebab-case-value',\\n}\\n\\nexport enum WhiteSpace {\\n  'white space value' = 'white space value',\\n}\\n\\nexport interface ViewEntity {\\n  one: number;\\n};\\n"
`;

exports[`viewNames with views 1`] = `
"export type Views = 'another-view' | 'view';\\n\\nexport enum Apples {}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomEnum {\\n  'foo   bar3' = 'foo   bar3',\\n  'foo  ---- ____ ---   bar6' = 'foo  ---- ____ ---   bar6',\\n  'foo bar' = 'foo bar',\\n  'foo----bar4' = 'foo----bar4',\\n  'foo-bar2' = 'foo-bar2',\\n  foo____bar5 = 'foo____bar5',\\n  value_one = 'value_one',\\n  value_two = 'value_two',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum Empty {}\\n\\nexport enum KebabCase1 {}\\n\\nexport enum KebabCase2 {\\n  'kebab-case-value' = 'kebab-case-value',\\n}\\n\\nexport enum WhiteSpace {\\n  'white space value' = 'white space value',\\n}\\n\\nexport interface AddressEntity {};\\n\\nexport interface AnotherViewEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface AppleEntity {};\\n\\nexport interface CustomEntity {\\n  custom1: CustomType;\\n  custom2: CustomType;\\n  custom3: CustomType;\\n  custom4: Array<CustomType>;\\n  custom5: Array<CustomType>;\\n  custom6: Array<CustomType>;\\n};\\n\\nexport interface DefaultEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface DefaultsNoColumnEntity {};\\n\\nexport interface EmptyEntity {};\\n\\nexport interface EntityEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface KebabCaseEntity {\\n  'kebab-case1': number | null;\\n  'kebab-case2': number;\\n};\\n\\nexport interface KnownEntity {\\n  known1: number;\\n  known2: number | null;\\n  known3: number | null;\\n  known4: number;\\n  known5: string | null;\\n  known6: string;\\n};\\n\\nexport interface SnakeCaseEntity {\\n  snake_case1: number | null;\\n  snake_case2: number;\\n};\\n\\nexport interface UnknownEntity {\\n  unknown1: any | null;\\n  unknown2: any;\\n  unknown3: Array<any> | null;\\n  unknown4: Array<any>;\\n};\\n\\nexport interface UpperCaseEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface ViewEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface WhiteSpaceEntity {\\n  'white space 1': number | null;\\n  'white space 2': number;\\n};\\n"
`;

exports[`viewNames without views 1`] = `
"export enum Apples {}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomEnum {\\n  'foo   bar3' = 'foo   bar3',\\n  'foo  ---- ____ ---   bar6' = 'foo  ---- ____ ---   bar6',\\n  'foo bar' = 'foo bar',\\n  'foo----bar4' = 'foo----bar4',\\n  'foo-bar2' = 'foo-bar2',\\n  foo____bar5 = 'foo____bar5',\\n  value_one = 'value_one',\\n  value_two = 'value_two',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum Empty {}\\n\\nexport enum KebabCase1 {}\\n\\nexport enum KebabCase2 {\\n  'kebab-case-value' = 'kebab-case-value',\\n}\\n\\nexport enum WhiteSpace {\\n  'white space value' = 'white space value',\\n}\\n\\nexport interface TableEntity {\\n  one: number;\\n};\\n"
`;

exports[`with custom suffix 1`] = `
"export enum Apples {}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomEnum {\\n  'foo   bar3' = 'foo   bar3',\\n  'foo  ---- ____ ---   bar6' = 'foo  ---- ____ ---   bar6',\\n  'foo bar' = 'foo bar',\\n  'foo----bar4' = 'foo----bar4',\\n  'foo-bar2' = 'foo-bar2',\\n  foo____bar5 = 'foo____bar5',\\n  value_one = 'value_one',\\n  value_two = 'value_two',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum Empty {}\\n\\nexport enum KebabCase1 {}\\n\\nexport enum KebabCase2 {\\n  'kebab-case-value' = 'kebab-case-value',\\n}\\n\\nexport enum WhiteSpace {\\n  'white space value' = 'white space value',\\n}\\n\\nexport interface AddressRecord {};\\n\\nexport interface AnotherViewRecord {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface AppleRecord {};\\n\\nexport interface CustomRecord {\\n  custom1: CustomType;\\n  custom2: CustomType;\\n  custom3: CustomType;\\n  custom4: Array<CustomType>;\\n  custom5: Array<CustomType>;\\n  custom6: Array<CustomType>;\\n};\\n\\nexport interface DefaultRecord {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface DefaultsNoColumnRecord {};\\n\\nexport interface EmptyRecord {};\\n\\nexport interface EntityRecord {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface KebabCaseRecord {\\n  'kebab-case1': number | null;\\n  'kebab-case2': number;\\n};\\n\\nexport interface KnownRecord {\\n  known1: number;\\n  known2: number | null;\\n  known3: number | null;\\n  known4: number;\\n  known5: string | null;\\n  known6: string;\\n};\\n\\nexport interface SnakeCaseRecord {\\n  snake_case1: number | null;\\n  snake_case2: number;\\n};\\n\\nexport interface UnknownRecord {\\n  unknown1: any | null;\\n  unknown2: any;\\n  unknown3: Array<any> | null;\\n  unknown4: Array<any>;\\n};\\n\\nexport interface UpperCaseRecord {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface ViewRecord {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface WhiteSpaceRecord {\\n  'white space 1': number | null;\\n  'white space 2': number;\\n};\\n"
`;

exports[`with generated insert types 1`] = `
"export enum Apples {}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomEnum {\\n  'foo   bar3' = 'foo   bar3',\\n  'foo  ---- ____ ---   bar6' = 'foo  ---- ____ ---   bar6',\\n  'foo bar' = 'foo bar',\\n  'foo----bar4' = 'foo----bar4',\\n  'foo-bar2' = 'foo-bar2',\\n  foo____bar5 = 'foo____bar5',\\n  value_one = 'value_one',\\n  value_two = 'value_two',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum Empty {}\\n\\nexport enum KebabCase1 {}\\n\\nexport enum KebabCase2 {\\n  'kebab-case-value' = 'kebab-case-value',\\n}\\n\\nexport enum WhiteSpace {\\n  'white space value' = 'white space value',\\n}\\n\\nexport interface AddressEntity {};\\n\\nexport interface AddressInsertEntity {};\\n\\nexport interface AnotherViewEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface AppleEntity {};\\n\\nexport interface AppleInsertEntity {};\\n\\nexport interface CustomEntity {\\n  custom1: CustomType;\\n  custom2: CustomType;\\n  custom3: CustomType;\\n  custom4: Array<CustomType>;\\n  custom5: Array<CustomType>;\\n  custom6: Array<CustomType>;\\n};\\n\\nexport interface CustomInsertEntity {\\n  custom1: CustomType;\\n  custom2: CustomType;\\n  custom3: CustomType;\\n  custom4: Array<CustomType>;\\n  custom5: Array<CustomType>;\\n  custom6: Array<CustomType>;\\n};\\n\\nexport interface DefaultEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface DefaultInsertEntity {\\n  one?: number;\\n  two?: number | null;\\n};\\n\\nexport interface DefaultsNoColumnEntity {};\\n\\nexport interface DefaultsNoColumnInsertEntity {};\\n\\nexport interface EmptyEntity {};\\n\\nexport interface EmptyInsertEntity {};\\n\\nexport interface EntityEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface EntityInsertEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface KebabCaseEntity {\\n  'kebab-case1': number | null;\\n  'kebab-case2': number;\\n};\\n\\nexport interface KebabCaseInsertEntity {\\n  'kebab-case1'?: number | null;\\n  'kebab-case2': number;\\n};\\n\\nexport interface KnownEntity {\\n  known1: number;\\n  known2: number | null;\\n  known3: number | null;\\n  known4: number;\\n  known5: string | null;\\n  known6: string;\\n};\\n\\nexport interface KnownInsertEntity {\\n  known1: number;\\n  known2?: number | null;\\n  known3?: number | null;\\n  known4: number;\\n  known5?: string | null;\\n  known6: string;\\n};\\n\\nexport interface SnakeCaseEntity {\\n  snake_case1: number | null;\\n  snake_case2: number;\\n};\\n\\nexport interface SnakeCaseInsertEntity {\\n  snake_case1?: number | null;\\n  snake_case2: number;\\n};\\n\\nexport interface UnknownEntity {\\n  unknown1: any | null;\\n  unknown2: any;\\n  unknown3: Array<any> | null;\\n  unknown4: Array<any>;\\n};\\n\\nexport interface UnknownInsertEntity {\\n  unknown1?: any | null;\\n  unknown2: any;\\n  unknown3?: Array<any> | null;\\n  unknown4: Array<any>;\\n};\\n\\nexport interface UpperCaseEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface UpperCaseInsertEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface ViewEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface WhiteSpaceEntity {\\n  'white space 1': number | null;\\n  'white space 2': number;\\n};\\n\\nexport interface WhiteSpaceInsertEntity {\\n  'white space 1'?: number | null;\\n  'white space 2': number;\\n};\\n"
`;

exports[`with generated insert types with optionals 1`] = `
"export enum Apples {}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomEnum {\\n  'foo   bar3' = 'foo   bar3',\\n  'foo  ---- ____ ---   bar6' = 'foo  ---- ____ ---   bar6',\\n  'foo bar' = 'foo bar',\\n  'foo----bar4' = 'foo----bar4',\\n  'foo-bar2' = 'foo-bar2',\\n  foo____bar5 = 'foo____bar5',\\n  value_one = 'value_one',\\n  value_two = 'value_two',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum Empty {}\\n\\nexport enum KebabCase1 {}\\n\\nexport enum KebabCase2 {\\n  'kebab-case-value' = 'kebab-case-value',\\n}\\n\\nexport enum WhiteSpace {\\n  'white space value' = 'white space value',\\n}\\n\\nexport interface AddressEntity {};\\n\\nexport interface AddressInsertEntity {};\\n\\nexport interface AnotherViewEntity {\\n  one: number;\\n  two?: number;\\n};\\n\\nexport interface AppleEntity {};\\n\\nexport interface AppleInsertEntity {};\\n\\nexport interface CustomEntity {\\n  custom1: CustomType;\\n  custom2: CustomType;\\n  custom3: CustomType;\\n  custom4: Array<CustomType>;\\n  custom5: Array<CustomType>;\\n  custom6: Array<CustomType>;\\n};\\n\\nexport interface CustomInsertEntity {\\n  custom1: CustomType;\\n  custom2: CustomType;\\n  custom3: CustomType;\\n  custom4: Array<CustomType>;\\n  custom5: Array<CustomType>;\\n  custom6: Array<CustomType>;\\n};\\n\\nexport interface DefaultEntity {\\n  one: number;\\n  two?: number;\\n};\\n\\nexport interface DefaultInsertEntity {\\n  one?: number;\\n  two?: number;\\n};\\n\\nexport interface DefaultsNoColumnEntity {};\\n\\nexport interface DefaultsNoColumnInsertEntity {};\\n\\nexport interface EmptyEntity {};\\n\\nexport interface EmptyInsertEntity {};\\n\\nexport interface EntityEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface EntityInsertEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface KebabCaseEntity {\\n  'kebab-case1'?: number;\\n  'kebab-case2': number;\\n};\\n\\nexport interface KebabCaseInsertEntity {\\n  'kebab-case1'?: number;\\n  'kebab-case2': number;\\n};\\n\\nexport interface KnownEntity {\\n  known1: number;\\n  known2?: number;\\n  known3?: number;\\n  known4: number;\\n  known5?: string;\\n  known6: string;\\n};\\n\\nexport interface KnownInsertEntity {\\n  known1: number;\\n  known2?: number;\\n  known3?: number;\\n  known4: number;\\n  known5?: string;\\n  known6: string;\\n};\\n\\nexport interface SnakeCaseEntity {\\n  snake_case1?: number;\\n  snake_case2: number;\\n};\\n\\nexport interface SnakeCaseInsertEntity {\\n  snake_case1?: number;\\n  snake_case2: number;\\n};\\n\\nexport interface UnknownEntity {\\n  unknown1?: any;\\n  unknown2: any;\\n  unknown3?: Array<any>;\\n  unknown4: Array<any>;\\n};\\n\\nexport interface UnknownInsertEntity {\\n  unknown1?: any;\\n  unknown2: any;\\n  unknown3?: Array<any>;\\n  unknown4: Array<any>;\\n};\\n\\nexport interface UpperCaseEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface UpperCaseInsertEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface ViewEntity {\\n  one: number;\\n  two?: number;\\n};\\n\\nexport interface WhiteSpaceEntity {\\n  'white space 1'?: number;\\n  'white space 2': number;\\n};\\n\\nexport interface WhiteSpaceInsertEntity {\\n  'white space 1'?: number;\\n  'white space 2': number;\\n};\\n"
`;

exports[`with header 1`] = `
"/* eslint-disable */\\n\\nexport enum Apples {}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomEnum {\\n  'foo   bar3' = 'foo   bar3',\\n  'foo  ---- ____ ---   bar6' = 'foo  ---- ____ ---   bar6',\\n  'foo bar' = 'foo bar',\\n  'foo----bar4' = 'foo----bar4',\\n  'foo-bar2' = 'foo-bar2',\\n  foo____bar5 = 'foo____bar5',\\n  value_one = 'value_one',\\n  value_two = 'value_two',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum Empty {}\\n\\nexport enum KebabCase1 {}\\n\\nexport enum KebabCase2 {\\n  'kebab-case-value' = 'kebab-case-value',\\n}\\n\\nexport enum WhiteSpace {\\n  'white space value' = 'white space value',\\n}\\n\\nexport interface AddressEntity {};\\n\\nexport interface AnotherViewEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface AppleEntity {};\\n\\nexport interface CustomEntity {\\n  custom1: CustomType;\\n  custom2: CustomType;\\n  custom3: CustomType;\\n  custom4: Array<CustomType>;\\n  custom5: Array<CustomType>;\\n  custom6: Array<CustomType>;\\n};\\n\\nexport interface DefaultEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface DefaultsNoColumnEntity {};\\n\\nexport interface EmptyEntity {};\\n\\nexport interface EntityEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface KebabCaseEntity {\\n  'kebab-case1': number | null;\\n  'kebab-case2': number;\\n};\\n\\nexport interface KnownEntity {\\n  known1: number;\\n  known2: number | null;\\n  known3: number | null;\\n  known4: number;\\n  known5: string | null;\\n  known6: string;\\n};\\n\\nexport interface SnakeCaseEntity {\\n  snake_case1: number | null;\\n  snake_case2: number;\\n};\\n\\nexport interface UnknownEntity {\\n  unknown1: any | null;\\n  unknown2: any;\\n  unknown3: Array<any> | null;\\n  unknown4: Array<any>;\\n};\\n\\nexport interface UpperCaseEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface ViewEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface WhiteSpaceEntity {\\n  'white space 1': number | null;\\n  'white space 2': number;\\n};\\n"
`;

exports[`with optionals 1`] = `
"export enum Apples {}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomEnum {\\n  'foo   bar3' = 'foo   bar3',\\n  'foo  ---- ____ ---   bar6' = 'foo  ---- ____ ---   bar6',\\n  'foo bar' = 'foo bar',\\n  'foo----bar4' = 'foo----bar4',\\n  'foo-bar2' = 'foo-bar2',\\n  foo____bar5 = 'foo____bar5',\\n  value_one = 'value_one',\\n  value_two = 'value_two',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum Empty {}\\n\\nexport enum KebabCase1 {}\\n\\nexport enum KebabCase2 {\\n  'kebab-case-value' = 'kebab-case-value',\\n}\\n\\nexport enum WhiteSpace {\\n  'white space value' = 'white space value',\\n}\\n\\nexport interface AddressEntity {};\\n\\nexport interface AnotherViewEntity {\\n  one: number;\\n  two?: number;\\n};\\n\\nexport interface AppleEntity {};\\n\\nexport interface CustomEntity {\\n  custom1: CustomType;\\n  custom2: CustomType;\\n  custom3: CustomType;\\n  custom4: Array<CustomType>;\\n  custom5: Array<CustomType>;\\n  custom6: Array<CustomType>;\\n};\\n\\nexport interface DefaultEntity {\\n  one: number;\\n  two?: number;\\n};\\n\\nexport interface DefaultsNoColumnEntity {};\\n\\nexport interface EmptyEntity {};\\n\\nexport interface EntityEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface KebabCaseEntity {\\n  'kebab-case1'?: number;\\n  'kebab-case2': number;\\n};\\n\\nexport interface KnownEntity {\\n  known1: number;\\n  known2?: number;\\n  known3?: number;\\n  known4: number;\\n  known5?: string;\\n  known6: string;\\n};\\n\\nexport interface SnakeCaseEntity {\\n  snake_case1?: number;\\n  snake_case2: number;\\n};\\n\\nexport interface UnknownEntity {\\n  unknown1?: any;\\n  unknown2: any;\\n  unknown3?: Array<any>;\\n  unknown4: Array<any>;\\n};\\n\\nexport interface UpperCaseEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface ViewEntity {\\n  one: number;\\n  two?: number;\\n};\\n\\nexport interface WhiteSpaceEntity {\\n  'white space 1'?: number;\\n  'white space 2': number;\\n};\\n"
`;

exports[`with pascal case enums 1`] = `
"export enum Apples {}\\n\\nexport enum CustomType {\\n  Bar = 'bar',\\n  Foo = 'foo',\\n}\\n\\nexport enum CustomType {\\n  Bar = 'bar',\\n  Foo = 'foo',\\n}\\n\\nexport enum CustomEnum {\\n  FooBar3 = 'foo   bar3',\\n  FooBar6 = 'foo  ---- ____ ---   bar6',\\n  FooBar = 'foo bar',\\n  FooBar4 = 'foo----bar4',\\n  FooBar2 = 'foo-bar2',\\n  Foobar5 = 'foo____bar5',\\n  ValueOne = 'value_one',\\n  ValueTwo = 'value_two',\\n}\\n\\nexport enum CustomType {\\n  Bar = 'bar',\\n  Foo = 'foo',\\n}\\n\\nexport enum Empty {}\\n\\nexport enum KebabCase1 {}\\n\\nexport enum KebabCase2 {\\n  KebabCaseValue = 'kebab-case-value',\\n}\\n\\nexport enum WhiteSpace {\\n  WhiteSpaceValue = 'white space value',\\n}\\n\\nexport interface AddressEntity {};\\n\\nexport interface AnotherViewEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface AppleEntity {};\\n\\nexport interface CustomEntity {\\n  custom1: CustomType;\\n  custom2: CustomType;\\n  custom3: CustomType;\\n  custom4: Array<CustomType>;\\n  custom5: Array<CustomType>;\\n  custom6: Array<CustomType>;\\n};\\n\\nexport interface DefaultEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface DefaultsNoColumnEntity {};\\n\\nexport interface EmptyEntity {};\\n\\nexport interface EntityEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface KebabCaseEntity {\\n  'kebab-case1': number | null;\\n  'kebab-case2': number;\\n};\\n\\nexport interface KnownEntity {\\n  known1: number;\\n  known2: number | null;\\n  known3: number | null;\\n  known4: number;\\n  known5: string | null;\\n  known6: string;\\n};\\n\\nexport interface SnakeCaseEntity {\\n  snake_case1: number | null;\\n  snake_case2: number;\\n};\\n\\nexport interface UnknownEntity {\\n  unknown1: any | null;\\n  unknown2: any;\\n  unknown3: Array<any> | null;\\n  unknown4: Array<any>;\\n};\\n\\nexport interface UpperCaseEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface ViewEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface WhiteSpaceEntity {\\n  'white space 1': number | null;\\n  'white space 2': number;\\n};\\n"
`;

exports[`with table string literal 1`] = `
"export type Tables = 'addresses' | 'apples' | 'custom' | 'defaults' | 'defaults_no_columns' | 'empty' | 'entities' | 'kebab-case' | 'known' | 'snake_case' | 'unknown' | 'UpperCase' | 'white space';\\n\\nexport enum Apples {}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum CustomEnum {\\n  'foo   bar3' = 'foo   bar3',\\n  'foo  ---- ____ ---   bar6' = 'foo  ---- ____ ---   bar6',\\n  'foo bar' = 'foo bar',\\n  'foo----bar4' = 'foo----bar4',\\n  'foo-bar2' = 'foo-bar2',\\n  foo____bar5 = 'foo____bar5',\\n  value_one = 'value_one',\\n  value_two = 'value_two',\\n}\\n\\nexport enum CustomType {\\n  bar = 'bar',\\n  foo = 'foo',\\n}\\n\\nexport enum Empty {}\\n\\nexport enum KebabCase1 {}\\n\\nexport enum KebabCase2 {\\n  'kebab-case-value' = 'kebab-case-value',\\n}\\n\\nexport enum WhiteSpace {\\n  'white space value' = 'white space value',\\n}\\n\\nexport interface AddressEntity {};\\n\\nexport interface AnotherViewEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface AppleEntity {};\\n\\nexport interface CustomEntity {\\n  custom1: CustomType;\\n  custom2: CustomType;\\n  custom3: CustomType;\\n  custom4: Array<CustomType>;\\n  custom5: Array<CustomType>;\\n  custom6: Array<CustomType>;\\n};\\n\\nexport interface DefaultEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface DefaultsNoColumnEntity {};\\n\\nexport interface EmptyEntity {};\\n\\nexport interface EntityEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface KebabCaseEntity {\\n  'kebab-case1': number | null;\\n  'kebab-case2': number;\\n};\\n\\nexport interface KnownEntity {\\n  known1: number;\\n  known2: number | null;\\n  known3: number | null;\\n  known4: number;\\n  known5: string | null;\\n  known6: string;\\n};\\n\\nexport interface SnakeCaseEntity {\\n  snake_case1: number | null;\\n  snake_case2: number;\\n};\\n\\nexport interface UnknownEntity {\\n  unknown1: any | null;\\n  unknown2: any;\\n  unknown3: Array<any> | null;\\n  unknown4: Array<any>;\\n};\\n\\nexport interface UpperCaseEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface ViewEntity {\\n  one: number;\\n  two: number | null;\\n};\\n\\nexport interface WhiteSpaceEntity {\\n  'white space 1': number | null;\\n  'white space 2': number;\\n};\\n"
`;

exports[`without enums 1`] = `
"export interface AddressEntity {};\\n\\nexport interface AnotherViewEntity {\\n  one: number;\\n  two?: number;\\n};\\n\\nexport interface AppleEntity {};\\n\\nexport interface CustomEntity {\\n  custom1: any;\\n  custom2: any;\\n  custom3: any;\\n  custom4: Array<any>;\\n  custom5: Array<any>;\\n  custom6: Array<any>;\\n};\\n\\nexport interface DefaultEntity {\\n  one: number;\\n  two?: number;\\n};\\n\\nexport interface DefaultsNoColumnEntity {};\\n\\nexport interface EmptyEntity {};\\n\\nexport interface EntityEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface KebabCaseEntity {\\n  'kebab-case1'?: number;\\n  'kebab-case2': number;\\n};\\n\\nexport interface KnownEntity {\\n  known1: number;\\n  known2?: number;\\n  known3?: number;\\n  known4: number;\\n  known5?: string;\\n  known6: string;\\n};\\n\\nexport interface SnakeCaseEntity {\\n  snake_case1?: number;\\n  snake_case2: number;\\n};\\n\\nexport interface UnknownEntity {\\n  unknown1?: any;\\n  unknown2: any;\\n  unknown3?: Array<any>;\\n  unknown4: Array<any>;\\n};\\n\\nexport interface UpperCaseEntity {\\n  duplicate: number;\\n  duplicate: number;\\n};\\n\\nexport interface ViewEntity {\\n  one: number;\\n  two?: number;\\n};\\n\\nexport interface WhiteSpaceEntity {\\n  'white space 1'?: number;\\n  'white space 2': number;\\n};\\n"
`;
